%für Sprache, A4 Blatt, float, Grafiken, UTF Codierung, PDF, Color, Seitenabstand, Listings
\documentclass[a4papr,12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[ngerman]{babel}
\usepackage{graphicx}
\usepackage{float}
\usepackage{textcomp}
\usepackage{pdfpages}
\usepackage{tikz}
\usepackage{hyperref}
\usepackage{geometry}
\usepackage{listings}
\usepackage{color}
\usepackage{grffile}
\usepackage{caption}

%Mathematics
\usepackage{amstext}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{mathrsfs}
\usepackage{mathtools}

%include this before fancy or page style gets messed up bc of geometry
\include{settings}

%Für Kopfzeile den Style
\usepackage{fancyhdr}
\pagestyle{fancy}
\lhead{ADE - Übung 10}
\rhead{Andreas Roither, \today{}}
\newcommand{\Cross}{\mathbin{\tikz [x=1.4ex,y=1.4ex,line width=.2ex] \draw (0,0) -- (1,1) (0,1) -- (1,0);}}%

\begin{document}

%ANGABE     
\thispagestyle{plain}
\includepdf[pages={1},pagecommand={     
\begin{tikzpicture}[remember picture, overlay]\node at (15.8, -1.35) {6 h};\end{tikzpicture}
\begin{tikzpicture}[remember picture, overlay]\node at (7.6, -1.35) {Andreas Roither};\end{tikzpicture}
\begin{Huge}
\begin{tikzpicture}[remember picture, overlay]\node at (-1.3, -1.9) {X};\end{tikzpicture}
\end{Huge}
}]{Angabe/UE1.pdf}
\thispagestyle{plain}
\includepdf[pages=2-,pagecommand={}]{Angabe/UE1.pdf}

\section*{Übung 1}
\subsection*{Aufgabe 1}
\subsubsection*{Lösungsidee}
Die erstellte Hash Tabelle enthält eine Doppelt verkette Liste, in dieser werden die Zeilennummern der Wörter gespeichert. Da die Hash Tabelle selbst nicht durch eine Quicksort Funktion sortiert werden darf, wird nebenbei beim einfügen eines Wortes in die Hash Tabelle, dasselbe Wort in ein String Array eingefügt. Dieses Array wird dann sortiert und der Reihe nach durch gegangen. Dabei wird der Hashcode des Wortes ausgerechnet und an der entsprechenden Stelle im Array wird nach dem Wort gesucht. Zusätzlich werden dann auch die Zeilennummern ausgegeben.
\newline

\lstinputlisting[language=Pascal] {../IndexGen.pas}
\begin{figure}[H]
	\centering
	\includegraphics[scale=0.65]{./pictures/ausgabe.jpg}
	\caption{Ausgabe}
	\label{fig: IndexGen}
\end{figure}

\subsection*{Aufgabe 2}
\subsubsection*{Lösungsidee}
Ähnlich wie bei Aufgabe 1 wird eine Hash Tabelle erstellt. Anschließend wird beim zeichnen für jede Position in der Tabelle die Knoten gezählt und gezeichnet. Es werden drei verschiedene Hash Funktionen getestet. Die ungewöhnliche Größe des String Arrays ergibt sich aus dem Testen. Ist die Größe des Arrays durch 3 teilbar, ist die Verteilung in der Tabelle lückenhaft und ähnlich schlecht wie bei der ersten oder zweiten Hash Funktion.
\newline

\lstinputlisting[language=Pascal] {../WG_Hash.pas}
\begin{figure}[H]
	\centering
	\includegraphics[scale=0.65]{./pictures/bad.jpg}
	\caption{Ausgabe}
	\label{fig: BadHash}
\end{figure}
Hier sieht man deutlich das die Verteilung der Elemente in der Tabelle sehr schlecht ist.

\begin{figure}[H]
	\centering
	\includegraphics[scale=0.65]{./pictures/better.jpg}
	\caption{Ausgabe}
	\label{fig: BetterHash}
\end{figure}
Im Gegensatz zur vorherigen Hash Funktion sieht hier die Verteilung etwas besser aus.

\begin{figure}[H]
	\centering
	\includegraphics[scale=0.65]{./pictures/best.jpg}
	\caption{Ausgabe}
	\label{fig: BestHash}
\end{figure}
Hie 

\end{document}





